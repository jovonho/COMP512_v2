package Server.Middleware;

import Server.Interface.*;

import java.rmi.RemoteException;
import java.util.Calendar;
import java.util.Vector;

import Server.Common.*;

/**
 * @notes
 * Do we want the middleware to output messages? 
 * If yes, is there a way to be able to output the trace messages generated by the different RMs ?
 * 
 * Weird behaviour: when I have Middleware.java in the Common package and RMIMiddleware.java in the RMI package, sysout printing does not work.
 * However, when I put either one of them in a new folder called Middleware then their output gets printed in the terminal.
 * I have updated the makefile in each case. 
 * 
 * What is a better way to implement Customers at the middleware level without having to make all the hashmap methods of the RM public access ?
 * 
 * @author lhovon
 *
 */

public abstract class Middleware implements IResourceManager {

	protected String m_name = "";
	protected RMHashMap m_data = new RMHashMap();
	
	static IResourceManager m_flightsManager = null;
	static IResourceManager m_carsManager = null;
	static IResourceManager m_roomsManager = null;


	public Middleware(String p_name)
	{
		m_name = p_name;
	}
	
	
	// Reads a data item
	protected RMItem readData(int xid, String key)
	{
		synchronized(m_data) {
			RMItem item = m_data.get(key);
			if (item != null) {
				return (RMItem)item.clone();
			}
			return null;
		}
	}

	public RMItem getItem(int xid, String key) {
		return readData(xid, key);
	}

	public void deleteData(int xid, String key){
		removeData(xid, key);
	}

	// Writes a data item
	protected void writeData(int xid, String key, RMItem value)
	{
		synchronized(m_data) {
			m_data.put(key, value);
		}
	}
	
	public void putItem(int xid, String key, RMItem value) {
		writeData(xid, key, value);
		Trace.info("Customer: "+key+"has been added to the remote server.");
	}
	
	
	// Remove the item out of storage
	protected void removeData(int xid, String key)
	{
		synchronized(m_data) {
			m_data.remove(key);
		}
	}

	// Deletes the encar item
	protected boolean deleteItem(int xid, String key)
	{
		Trace.info("RM::deleteItem(" + xid + ", " + key + ") called");
		ReservableItem curObj = (ReservableItem)readData(xid, key);
		// Check if there is such an item in the storage
		if (curObj == null)
		{
			Trace.warn("RM::deleteItem(" + xid + ", " + key + ") failed--item doesn't exist");
			return false;
		}
		else
		{
			if (curObj.getReserved() == 0)
			{
				removeData(xid, curObj.getKey());
				Trace.info("RM::deleteItem(" + xid + ", " + key + ") item deleted");
				return true;
			}
			else
			{
				Trace.info("RM::deleteItem(" + xid + ", " + key + ") item can't be deleted because some customers have reserved it");
				return false;
			}
		}
	}

	// Query the number of available seats/rooms/cars
	protected int queryNum(int xid, String key)
	{
		Trace.info("RM::queryNum(" + xid + ", " + key + ") called");
		ReservableItem curObj = (ReservableItem)readData(xid, key);
		int value = 0;  
		if (curObj != null)
		{
			value = curObj.getCount();
		}
		Trace.info("RM::queryNum(" + xid + ", " + key + ") returns count=" + value);
		return value;
	}    

	// Query the price of an item
	protected int queryPrice(int xid, String key)
	{
		Trace.info("RM::queryPrice(" + xid + ", " + key + ") called");
		ReservableItem curObj = (ReservableItem)readData(xid, key);
		int value = 0; 
		if (curObj != null)
		{
			value = curObj.getPrice();
		}
		Trace.info("RM::queryPrice(" + xid + ", " + key + ") returns cost=$" + value);
		return value;        
	}

	// Reserve an item
	protected boolean reserveItem(int xid, int customerID, String key, String location) throws RemoteException
	{
		Trace.info("RM::reserveItem(" + xid + ", customer=" + customerID + ", " + key + ", " + location + ") called" );  
		
		// Read customer object if it exists (and read lock it)
		Customer customer = (Customer)readData(xid, Customer.getKey(customerID));
		if (customer == null)
		{
			Trace.warn("RM::reserveItem(" + xid + ", " + customerID + ", " + key + ", " + location + ")  failed--customer doesn't exist");
			return false;
		} 
		
		if (key.startsWith("flight")) 
		{
			ReservableItem item = (ReservableItem) m_flightsManager.getItem(xid, key);
			if (item == null)
			{
				Trace.warn("RM::reserveItem(" + xid + ", " + customerID + ", " + key + ", " + location + ") failed--item doesn't exist");
				return false;
			}
			else if (item.getCount() == 0)
			{
				Trace.warn("RM::reserveItem(" + xid + ", " + customerID + ", " + key + ", " + location + ") failed--No more items");
				return false;
			}
			else
			{            
				customer.reserve(key, location, item.getPrice());        
				writeData(xid, customer.getKey(), customer);

				// Decrease the number of available items in the storage
				item.setCount(item.getCount() - 1);
				item.setReserved(item.getReserved() + 1);
				m_flightsManager.putItem(xid, item.getKey(), item);

				Trace.info("RM::reserveItem(" + xid + ", " + customerID + ", " + key + ", " + location + ") succeeded");
				return true;
			}
		}
		else if (key.startsWith("car"))
		{
			ReservableItem item = (ReservableItem) m_carsManager.getItem(xid, key);
			if (item == null)
			{
				Trace.warn("RM::reserveItem(" + xid + ", " + customerID + ", " + key + ", " + location + ") failed--item doesn't exist");
				return false;
			}
			else if (item.getCount() == 0)
			{
				Trace.warn("RM::reserveItem(" + xid + ", " + customerID + ", " + key + ", " + location + ") failed--No more items");
				return false;
			}
			else
			{            
				customer.reserve(key, location, item.getPrice());        
				writeData(xid, customer.getKey(), customer);

				// Decrease the number of available items in the storage
				item.setCount(item.getCount() - 1);
				item.setReserved(item.getReserved() + 1);
				m_carsManager.putItem(xid, item.getKey(), item);

				Trace.info("RM::reserveItem(" + xid + ", " + customerID + ", " + key + ", " + location + ") succeeded");
				return true;
			}
		}
		else
		{
			ReservableItem item = (ReservableItem) m_roomsManager.getItem(xid, key);
			if (item == null)
			{
				Trace.warn("RM::reserveItem(" + xid + ", " + customerID + ", " + key + ", " + location + ") failed--item doesn't exist");
				return false;
			}
			else if (item.getCount() == 0)
			{
				Trace.warn("RM::reserveItem(" + xid + ", " + customerID + ", " + key + ", " + location + ") failed--No more items");
				return false;
			}
			else
			{            
				customer.reserve(key, location, item.getPrice());        
				writeData(xid, customer.getKey(), customer);

				// Decrease the number of available items in the storage
				item.setCount(item.getCount() - 1);
				item.setReserved(item.getReserved() + 1);
				m_roomsManager.putItem(xid, item.getKey(), item);

				Trace.info("RM::reserveItem(" + xid + ", " + customerID + ", " + key + ", " + location + ") succeeded");
				return true;
			}
		}      
	}



	// Create a new flight, or add seats to existing flight
	// NOTE: if flightPrice <= 0 and the flight already exists, it maintains its current price
	/*public boolean addFlight(int xid, int flightNum, int flightSeats, int flightPrice) throws RemoteException
	{
		Trace.info("RM::addFlight(" + xid + ", " + flightNum + ", " + flightSeats + ", $" + flightPrice + ") called");
		return m_flightsManager.addFlight(xid, flightNum, flightSeats, flightPrice);
	}

	// Create a new car location or add cars to an existing location
	// NOTE: if price <= 0 and the location already exists, it maintains its current price
	public boolean addCars(int xid, String location, int count, int price) throws RemoteException
	{
		Trace.info("RM::addCars(" + xid + ", " + location + ", " + count + ", $" + price + ") called");
		return m_carsManager.addCars(xid, location, count, price);
	}

	// Create a new room location or add rooms to an existing location
	// NOTE: if price <= 0 and the room location already exists, it maintains its current price
	public boolean addRooms(int xid, String location, int count, int price) throws RemoteException
	{
		Trace.info("RM::addRooms(" + xid + ", " + location + ", " + count + ", $" + price + ") called");
		return m_roomsManager.addRooms(xid, location, count, price);
	}*/

	// Deletes flight
	public boolean deleteFlight(int xid, int flightNum) throws RemoteException
	{
		return m_flightsManager.deleteFlight(xid, flightNum);
	}

	// Delete cars at a location
	public boolean deleteCars(int xid, String location) throws RemoteException
	{
		return m_carsManager.deleteCars(xid, location);
	}

	// Delete rooms at a location
	public boolean deleteRooms(int xid, String location) throws RemoteException
	{
		return m_roomsManager.deleteRooms(xid, location);
	}

	// Returns the number of empty seats in this flight
	/*public int queryFlight(int xid, int flightNum) throws RemoteException
	{
		return m_flightsManager.queryFlight(xid, flightNum);
	}*/

	// Returns the number of cars available at a location
	public int queryCars(int xid, String location) throws RemoteException
	{
		return m_carsManager.queryCars(xid, location);
	}

	// Returns the amount of rooms available at a location
	public int queryRooms(int xid, String location) throws RemoteException
	{
		return m_roomsManager.queryRooms(xid, location);
	}

	// Returns price of a seat in this flight
	public int queryFlightPrice(int xid, int flightNum) throws RemoteException
	{
		return m_flightsManager.queryFlightPrice(xid, flightNum);
	}

	// Returns price of cars at this location
	public int queryCarsPrice(int xid, String location) throws RemoteException
	{
		return m_carsManager.queryCarsPrice(xid, location);
	}

	// Returns room price at this location
	public int queryRoomsPrice(int xid, String location) throws RemoteException
	{
		return m_roomsManager.queryRoomsPrice(xid, location);
	}

	public String queryCustomerInfo(int xid, int customerID) throws RemoteException
	{
		Trace.info("RM::queryCustomerInfo(" + xid + ", " + customerID + ") called");
		Customer customer = (Customer)readData(xid, Customer.getKey(customerID));
		if (customer == null)
		{
			Trace.warn("RM::queryCustomerInfo(" + xid + ", " + customerID + ") failed--customer doesn't exist");
			// NOTE: don't change this--WC counts on this value indicating a customer does not exist...
			return "";
		}
		else
		{
			Trace.info("RM::queryCustomerInfo(" + xid + ", " + customerID + ")");
			System.out.println(customer.getBill());
			return customer.getBill();
		}
	}

	/*public int newCustomer(int xid) throws RemoteException
	{
        	Trace.info("RM::newCustomer(" + xid + ") called");
		// Generate a globally unique ID for the new customer
		int cid = Integer.parseInt(String.valueOf(xid) +
			String.valueOf(Calendar.getInstance().get(Calendar.MILLISECOND)) +
			String.valueOf(Math.round(Math.random() * 100 + 1)));
		Customer customer = new Customer(cid);
		writeData(xid, customer.getKey(), customer);
		Trace.info("RM::newCustomer(" + cid + ") returns ID=" + cid);
		return cid;
	}

	public boolean newCustomer(int xid, int customerID) throws RemoteException
	{
		Trace.info("RM::newCustomer(" + xid + ", " + customerID + ") called");
		Customer customer = (Customer)readData(xid, Customer.getKey(customerID));
		if (customer == null)
		{
			customer = new Customer(customerID);
			writeData(xid, customer.getKey(), customer);
			Trace.info("RM::newCustomer(" + xid + ", " + customerID + ") created a new customer");
			return true;
		}
		else
		{
			Trace.info("INFO: RM::newCustomer(" + xid + ", " + customerID + ") failed--customer already exists");
			return false;
		}
	}*/

	public boolean deleteCustomer(int xid, int customerID) throws RemoteException
	{
		Trace.info("RM::deleteCustomer(" + xid + ", " + customerID + ") called");
		Customer customer = (Customer)readData(xid, Customer.getKey(customerID));
		if (customer == null)
		{
			Trace.warn("RM::deleteCustomer(" + xid + ", " + customerID + ") failed--customer doesn't exist");
			return false;
		}
		else
		{            
			// Increase the reserved numbers of all reservable items which the customer reserved. 
 			RMHashMap reservations = customer.getReservations();
			for (String reservedKey : reservations.keySet())
			{        
				ReservedItem reserveditem = customer.getReservedItem(reservedKey);
				Trace.info("RM::deleteCustomer(" + xid + ", " + customerID + ") has reserved " + reserveditem.getKey() + " " +  reserveditem.getCount() +  " times");
				
				if (reservedKey.startsWith("flight")){
					ReservableItem item  = (ReservableItem)m_flightsManager.getItem(xid, reserveditem.getKey());
					Trace.info("RM::deleteCustomer(" + xid + ", " + customerID + ") has reserved " + reserveditem.getKey() + " which is reserved " +  item.getReserved() +  " times and is still available " + item.getCount() + " times");
					item.setReserved(item.getReserved() - reserveditem.getCount());
					item.setCount(item.getCount() + reserveditem.getCount());
					m_flightsManager.putItem(xid, item.getKey(), item);
				}
				else if (reservedKey.startsWith("car")){
					ReservableItem item  = (ReservableItem)m_carsManager.getItem(xid, reserveditem.getKey());
					Trace.info("RM::deleteCustomer(" + xid + ", " + customerID + ") has reserved " + reserveditem.getKey() + " which is reserved " +  item.getReserved() +  " times and is still available " + item.getCount() + " times");
					item.setReserved(item.getReserved() - reserveditem.getCount());
					item.setCount(item.getCount() + reserveditem.getCount());
					m_carsManager.putItem(xid, item.getKey(), item);
				}
				else {
					ReservableItem item  = (ReservableItem)m_roomsManager.getItem(xid, reserveditem.getKey());
					Trace.info("RM::deleteCustomer(" + xid + ", " + customerID + ") has reserved " + reserveditem.getKey() + " which is reserved " +  item.getReserved() +  " times and is still available " + item.getCount() + " times");
					item.setReserved(item.getReserved() - reserveditem.getCount());
					item.setCount(item.getCount() + reserveditem.getCount());
					m_roomsManager.putItem(xid, item.getKey(), item);
				}
				
			}

			// Remove the customer from the storage
			removeData(xid, customer.getKey());
			Trace.info("RM::deleteCustomer(" + xid + ", " + customerID + ") succeeded");
			return true;
		}
	}

	// Adds flight reservation to this customer
	/*public boolean reserveFlight(int xid, int customerID, int flightNum) throws RemoteException
	{
		return reserveItem(xid, customerID, Flight.getKey(flightNum), String.valueOf(flightNum));
	}*/

	// Adds car reservation to this customer
	public boolean reserveCar(int xid, int customerID, String location) throws RemoteException
	{
		return reserveItem(xid, customerID, Car.getKey(location), location);
	}

	// Adds room reservation to this customer
	public boolean reserveRoom(int xid, int customerID, String location) throws RemoteException
	{
		return reserveItem(xid, customerID, Room.getKey(location), location);
	}

	// Reserve bundle 
	public boolean bundle(int xid, int customerID, Vector<String> flightNumbers, String location, boolean car, boolean room) throws RemoteException
	{
		Trace.info("RM::bundle(" + xid + ", " + customerID + ", " + flightNumbers + ", " + location + ", " + car + ", " + room + ") called");
		Customer customer = (Customer)readData(xid, Customer.getKey(customerID));
		
		if (customer == null)
		{
			Trace.warn("RM::bundle(" + xid + ", " + customerID + ", " + flightNumbers + ", " + location + ", " + car + ", " + room + ") failed--customer doesn't exist");
			return false;
		}
		else
		{
			for (String num : flightNumbers) 
			{
				reserveFlight(xid, customerID, Integer.parseInt(num));
			}
			if (car) 
			{
				reserveCar(xid, customerID, location);
			}
			if (room) 
			{
				reserveRoom(xid, customerID, location);
			}
		}
		
		return true;
	}

	public String getName() throws RemoteException
	{
		return m_name;
	}
}
